package com.cc.service;import com.cc.dao.ProductDao;import com.cc.domain.Category;import com.cc.domain.Order;import com.cc.domain.OrderItem;import com.cc.domain.PageBean;import com.cc.domain.Product;import com.cc.utils.DataSourceUtils;import java.sql.SQLException;import java.util.List;import java.util.Map;import org.apache.taglibs.standard.tag.common.sql.DataSourceUtil;public class ProductService {    //获得热门商品    public List<Product> findHotProductList() {        ProductDao dao=new ProductDao();        List<Product> hotProductList = null;        try {            hotProductList = dao.findHotProductList();        } catch (SQLException e) {            e.printStackTrace();        }        return hotProductList;    }    //获得最新商品    public List<Product> findNewProductList() {        ProductDao dao=new ProductDao();        List<Product> newProductList = null;        try {            newProductList = dao.findNewProductList();        } catch (SQLException e) {            e.printStackTrace();        }        return newProductList;    }	public List<Category> findAllCategory() {		ProductDao dao=new ProductDao();		List<Category> categoryList=null;		try {			categoryList=dao.findAllCategory();		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		return categoryList;	}	public PageBean findProductListByCid(String cid, int currentPage, int currentCount) {		ProductDao dao=new ProductDao();		//封装一个PageBean返回web层		PageBean<Product> pageBean=new PageBean<Product>();				//1.封装当前页		pageBean.setCurrentPage(currentPage);		//2.封装每页显示的条数		pageBean.setCurrentCount(currentCount);		//3.封装总条数		int totalCount=0;		try {			totalCount=dao.getCount(cid);		} catch (Exception e) {			e.printStackTrace();		}		pageBean.setTotalCount(totalCount);		//4.封装总页数		int totalPage=(int) Math.ceil(1.0*totalCount/currentCount);		pageBean.setTotalCount(totalCount);				//5.当前页显示的数据		int index=(currentPage-1)*currentCount;		List<Product> list=null;		try {			list=dao.findProductByPage(cid,index,currentCount);		} catch (Exception e) {			e.printStackTrace();		}		pageBean.setList(list);		return pageBean;	}	public Product findProductByPid(String pid) {		ProductDao dao = new ProductDao();		Product product=null;		try {			product=dao.findProductByPid(pid);		} catch (SQLException e) {			e.printStackTrace();		}		return product;	}		//提交订单 将订单的数据和订单项的数据存储到数据库中	public void submitOrder(Order order) {				ProductDao dao=new ProductDao();				try {			//1. 开启事务			DataSourceUtils.startTransaction();			//2.调用dao存储order表数据的方法			dao.addOrders(order);			//3.调用dao存储orderitem表数据的方法			dao.addOrderItem(order);		} catch (SQLException e) {			try {				DataSourceUtils.rollback();			} catch (SQLException e1) {				e1.printStackTrace();			}			e.printStackTrace();		}finally {			try {				DataSourceUtils.commitAndRelease();			} catch (SQLException e) {				e.printStackTrace();			}		}	}	public void updateOrderAddr(Order order) {		ProductDao dao=new ProductDao();		try {			dao.updateOrderAddr(order);		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}		//获得指定用户的订单集合	public List<Order> findAllOrders(String uid) {		ProductDao dao=new ProductDao();		List<Order> orderList=null;		try {			orderList = dao.findAllOrders(uid);		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		return orderList;	}	public List<Map<String, Object>> findAllOrderItemByOid(String oid) {		ProductDao dao=new ProductDao();		List<Map<String, Object>> mapList=null;		try {			mapList = dao.findAllOrderItemByOid(oid);		} catch (SQLException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		return mapList;	}}